[{"name":"app.R","content":"# Shiny Dashboard\r\n\r\n## app.R ##\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(ggplot2)\r\nlibrary(shinyjs)\r\n\r\n# Load Data\r\n  \r\n# Input parameters\r\n  # State Community Health Services Advisory Committee as of 1_17_2024\r\n  input_schsac_raw <- read.csv(\r\n    \"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/State%20Community%20Health%20Services%20Advisory%20Committee%20as%20of%201_17_2024.csv\"\r\n  )\r\n  \r\n  input_chb_raw <- read.csv(\r\n    \"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20SCHSAC%20%26%20CHB%20Regions/MN%20CHB%20as%20of%201_17_2024.csv\"\r\n  )\r\n\r\n#Healthy Homes\r\nlead_raw <-  read.csv(\r\n  \"https://raw.githubusercontent.com/quinCHB/Public-Data-Sources/main/MN%20Public%20Health%20Data%20Access%20Portal/Healthy%20Homes/Childhood%20Lead%20Exposure.csv\"\r\n)\r\n\r\nui <- dashboardPage(\r\n                    dashboardHeader(\r\n                                    title = \"MN Public Health Data Access Portal\",\r\n                                    titleWidth = 400\r\n                                    #disable = TRUE\r\n                                    ),\r\n                    dashboardSidebar(\r\n                                    width = 350, #This makes the sidebar wider. However, it doesn't the input boxes seem to have a set dimension resulting in long names still wrapping\r\n                                    # The next items require \r\n                                    checkboxInput(inputId = \"par_hide_narrative\", label = \"HIDE NARRATIVE\"),\r\n                                    # Other input elements...\r\n                                    selectInput(\r\n                                                \"par_county\",\r\n                                                label= \"Select County of Interest\",\r\n                                                choices= sort(unique(input_schsac_raw$County)),\r\n                                                selected= \"Kittson\",\r\n                                                multiple= FALSE,\r\n                                                width= 350 \r\n                                              ),\r\n                                    selectInput(\r\n                                                \"par_region\",\r\n                                                label= \"Select SCHSAC Region\",\r\n                                                choices= NULL,\r\n                                                selected= NULL,\r\n                                                multiple= FALSE,\r\n                                                width= 350 \r\n                                              ),\r\n                                    selectInput(\r\n                                                \"par_chb\",\r\n                                                label= \"Select Community Health Board\",\r\n                                                choices= NULL,\r\n                                                selected= NULL,\r\n                                                multiple= FALSE,\r\n                                                width= 350 \r\n                                              ),\r\n                                    #Sidebar is required\r\n                                    sidebarMenu(\r\n                                                menuItem(\"Region & CHB Defintions\", tabName = \"regionChbDefinations\"),\r\n                                                menuItem(\"Child Health\", tabName = \"childHealth\"),\r\n                                                menuItem(\"Climate\", tabName = \"climate\"),\r\n                                                menuItem(\"Diseases & Conditions\", tabName = \"diseasesConditions\"),\r\n                                                menuItem(\"Environmental Health\", tabName = \"environmentalHealth\"),\r\n                                                menuItem(\"Health Behaviors/Risk Factors\", tabName = \"healthBehaviorsRiskFactors\"),\r\n                                                menuItem(\"Health Equity\", tabName = \"healthEquity\"),\r\n                                                menuItem(\"Healthy Homes\", tabName = \"healthyHomes\")\r\n                                              )\r\n                                    ),\r\n                      dashboardBody(\r\n                        useShinyjs(),\r\n                                    fluidRow(\r\n                                            column(12,\r\n                                                   tabItems(\r\n                                                          ####################################################################################\r\n                                                          tabItem(\r\n                                                                  tabName = \"regionChbDefinations\",\r\n                                                                  tabsetPanel(\r\n                                                                              id= \"willThisWork\",\r\n                                                                              tabPanel(\r\n                                                                                      \"Region\",\r\n                                                                                      fluidRow(\r\n                                                                                              # Narrative section explaining the purpose of the dashboard\r\n                                                                                              column(\r\n                                                                                                    width = 12,\r\n                                                                                                    h1(\"Welcome to the Landing Page for This Awesome Dashboard...Subjective of Course :)\"),\r\n                                                                                                    h3(\"There are three filters on the left: Select County of Interest, Select SCHSAC Region, & Select Community Health Board.\"),\r\n                                                                                                    h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Regions will remain in <b>bold<\/b>.\")),\r\n                                                                                                    h3(\"For this tab, nothing will change if the Select SCHSAC Region and Select Community Health Board filters are updated.\"),\r\n                                                                                                    h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which region.\"),\r\n                                                                                                    #The next line inserts a line between the narrative and the data\r\n                                                                                                    tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                                                                                                    )\r\n                                                                                              ),\r\n                                                                                      fluidRow(\r\n                                                                                              uiOutput(\"region_narrative\", style = \"font-size: 20px;\")\r\n                                                                                              )\r\n                                                                                      ),\r\n                                                                              tabPanel(\r\n                                                                                      \"CHB\",\r\n                                                                                      fluidRow(\r\n                                                                                              # Narrative section explaining the purpose of the dashboard\r\n                                                                                              column(\r\n                                                                                                    width = 12,\r\n                                                                                                    h3(HTML(\"Updating the Select County of Interest filter, wll highlight the county in <font color=red>red<\/font> while the Community Health Boards will remain in <b>bold<\/b>.\")),\r\n                                                                                                    h3(\"For this tab, nothing will change if the Select SCHSAC Region and Select Community Health Board filters are updated.\"),\r\n                                                                                                    h3(\"The purpose for this tab is to provide a quick reference for what counties fall under which Community Health Board.\"),\r\n                                                                                                    #The next line inserts a line between the narrative and the data\r\n                                                                                                    tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\")\r\n                                                                                                  )\r\n                                                                                              ),\r\n                                                                                        fluidRow(\r\n                                                                                                column(6, uiOutput(\"chb_narrative_01\", style = \"font-size: 20px;\")),\r\n                                                                                                column(6, uiOutput(\"chb_narrative_02\", style = \"font-size: 20px;\"))\r\n                                                                                                )\r\n                                                                                        )\r\n                                                                            )\r\n                                                                  ),\r\n                                                ##########################################################################\r\n                                                            tabItem(\r\n                                                                    tabName = \"childHealth\",\r\n                                                                    #Dynamic Narrative for child health\r\n                                                                    h5(\"testing 123\"),\r\n  \r\n  \r\n                                                                    tabsetPanel(\r\n                                                                              tabPanel(\"Asthma\"),\r\n                                                                              tabPanel(\"Health Inequities in Childhood Asthma\"),\r\n                                                                              tabPanel(\"Birth Defects\"),\r\n                                                                              tabPanel(\"Childhood Lead Exposure\"),\r\n                                                                              tabPanel(\"Free/Reduced Price Lunch Eligibility\", h5(\"testing 123\")),\r\n                                                                              tabPanel(\"Immunizations\", h5(\"testing 123\")),\r\n                                                                              tabPanel(\"Oral Health\", h5(\"testing 123\"))\r\n                                                                              )\r\n                                                                     ),\r\n                                                ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"climate\",\r\n                                                                      tabsetPanel(\r\n                                                                                tabPanel(\"Air Quality\"),\r\n                                                                                tabPanel(\"Cold-related Illness\"),\r\n                                                                                tabPanel(\"Climate-related Environmental Health Concerns\"),\r\n                                                                                tabPanel(\"Heat-related Illness\"),\r\n                                                                                tabPanel(\"Hot Weather\", h5(\"testing 123\")),\r\n                                                                                tabPanel(\"Pollen\", h5(\"testing 123\"))\r\n                                                                                )\r\n                                                                      ),\r\n                                                ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"diseasesConditions\",\r\n                                                                      tabsetPanel(\r\n                                                                                  tabPanel(\"Asthma\"),\r\n                                                                                  tabPanel(\"Birth Defects\"),\r\n                                                                                  tabPanel(\"Cancer\"),\r\n                                                                                  tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                                                                                  tabPanel(\"Chronic Obstructive Pulmonary Disease (COPD)\", h5(\"testing 123\")),\r\n                                                                                  tabPanel(\"Diabetes\", h5(\"testing 123\")),\r\n                                                                                  tabPanel(\"Heart Attacks\"),\r\n                                                                                  tabPanel(\"Heat-related Illness\", h5(\"testing 123\")),\r\n                                                                                  tabPanel(\"Immunizations\", h5(\"testing 123\")),\r\n                                                                                  tabPanel(\"Oral Health\")\r\n                                                                                  )\r\n                                                                      ),\r\n                                                ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"environmentalHealth\",\r\n                                                                      tabsetPanel(\r\n                                                                                tabPanel(\"Air Quality\"),\r\n                                                                                tabPanel(\"Biomonitoring: Chemicals in people\"),\r\n                                                                                tabPanel(\"Cold-related Illness\"),\r\n                                                                                tabPanel(\"Drinking Water Quality\"),\r\n                                                                                tabPanel(\"Environmental Justice\", h5(\"testing 123\")),\r\n                                                                                tabPanel(\"Heat-related Illness\", h5(\"testing 123\")),\r\n                                                                                tabPanel(\"Pesticide Poisoning\"),\r\n                                                                                tabPanel(\"Traffic\", h5(\"testing 123\"))\r\n                                                                                )\r\n                                                                      ),\r\n                                                  ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"healthBehaviorsRiskFactors\",\r\n                                                                      tabsetPanel(\r\n                                                                                tabPanel(\"Health Insurance\"),\r\n                                                                                tabPanel(\"Immunizations\"),\r\n                                                                                tabPanel(\"Obesity\"),\r\n                                                                                tabPanel(\"Oral Health\"),\r\n                                                                                tabPanel(\"Poverty & Income\", h5(\"testing 123\")),\r\n                                                                                tabPanel(\"Smoking\", h5(\"testing 123\"))\r\n                                                                                )\r\n                                                                      ),\r\n                                                  ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"healthEquity\",\r\n                                                                      tabsetPanel(\r\n                                                                                tabPanel(\"Health Equity\"),\r\n                                                                                tabPanel(\"Health Inequities in Childhood Lead Exposure\"),\r\n                                                                                tabPanel(\"Health Inequities in Childhood Asthma\")\r\n                                                                                )\r\n                                                                      ),\r\n                                                  ####################################################################################\r\n                                                              tabItem(\r\n                                                                      tabName = \"healthyHomes\",\r\n                                                                      tabsetPanel(\r\n                                                                                tabPanel(\"Carbon Monoxide (CO) Poisoning\"),\r\n                                                                                tabPanel(\"Childhood Lead Exposure\",\r\n                                                                                         fluidRow(\r\n                                                                                                 # Narrative section explaining the purpose of the dashboard\r\n                                                                                                  column(\r\n                                                                                                        width= 1,\r\n                                                                                                         selectInput(\r\n                                                                                                                     \"par_leadYear\",\r\n                                                                                                                     label= \"Select Year\",\r\n                                                                                                                     choices= sort(unique(lead_raw$year), decreasing = TRUE),\r\n                                                                                                                     selected= max(unique(lead_raw$year)),\r\n                                                                                                                     multiple= FALSE\r\n                                                                                                                    ),\r\n                                                                                                         selectInput(\r\n                                                                                                                     \"par_stateRegionChb\",\r\n                                                                                                                     label= \"Select Comparison\",\r\n                                                                                                                     choices= c(\"All\", \"CHB\", \"Region\", \"State\"),\r\n                                                                                                                     selected= \"All\",\r\n                                                                                                                     multiple= FALSE\r\n                                                                                                                   )\r\n                                                                                                        ),\r\n                                                                                                   # Narrative section explaining the purpose of the dashboard\r\n                                                                                                   column(\r\n                                                                                                          width = 11,\r\n                                                                                                           id = \"lead_narrativeHide\",\r\n                                                                                                          h4(htmlOutput(\"lead_narrative\"))\r\n                                                                                                          )\r\n                                                                                               ),\r\n                                                                                        fluidRow(\r\n                                                                                                #The next line inserts a line between the narrative and the data. I\r\n                                                                                                #It is added here instead of in the narrative since the narrative can have multiple columns. \r\n                                                                                                #If there are multiple narrative columns and the line is added there than the line consists of multiple breaks \r\n                                                                                                tags$hr(style = \"border-top: 1px solid #ccc; margin-top: 20px; margin-bottom: 20px;\"),\r\n                                                                                                box(plotOutput(\"lead_state\")),\r\n                                                                                                box(plotOutput(\"lead_region\"))\r\n                                                                                               ),\r\n                                                                                        fluidRow(\r\n                                                                                                box(plotOutput(\"lead_chb\")),\r\n                                                                                                box(plotOutput(\"lead_county\"))\r\n                                                                                               )\r\n                                                                                      ),\r\n                                                                                tabPanel(\"Drinking Water Quality\"),\r\n                                                                                tabPanel(\"Pesticide Poisoning\"),\r\n                                                                                tabPanel(\"Radon\", h5(\"testing 123\")),\r\n                                                                                )\r\n                                                                    )\r\n                                                          )\r\n                                                   \r\n                                                  )\r\n                                        )\r\n                              )\r\n                  )\r\n\r\n\r\n##############################################################################################\r\n#To improve performance load these once and don't have them run every time the server runs\r\n\r\n###########################Region & County Definitions#########################################################\r\n## Region Narrative\r\n\r\n# Create region data frame for global narrative reference\r\nschsac_raw <- input_schsac_raw\r\n\r\n#Bold Regions so it is easier to understand narrative\r\nschsac_raw$Region <-  paste(\"<b>\", schsac_raw$Region, \"<\/b>\")\r\n\r\n##############\r\n#############\r\n## CHB Narrative 01 (It is split in half so it displays in two nice columns on the UI\r\n# Create chb data frame for global narrative reference\r\nchb_raw_01 <- input_chb_raw[1:33,]\r\n\r\n#Bold CHBs so it is easier to understand narrative\r\nchb_raw_01$CHB <-  paste(\"<b>\", chb_raw_01$CHB, \"<\/b>\")\r\n\r\n##############\r\n#############\r\n## CHB Narrative 02 (It is split in half so it displays in two nice columns on the UI\r\n# Create chb data frame for global narrative reference\r\nchb_raw_02 <- input_chb_raw[34:nrow(input_chb_raw),] # :nrow means it goes to the end of the data frame\r\n\r\n#Bold CHBs so it is easier to understand narrative\r\nchb_raw_02$CHB <-  paste(\"<b>\", chb_raw_02$CHB, \"<\/b>\")\r\n\r\n################################### Healthy Homes #########################################\r\n\r\n#Childhood Lead Exposure\r\n\r\n# Combine CHB\r\n# This does not appear to be correct. It seems like it is executing an outer join not an inner join\r\nlead_CHB <- merge(x= lead_raw, y= input_chb_raw, by.x= \"location\", by.y= \"County\") #, all = TRUE) Don't include the all = TRUE\r\n\r\n# #https://www.youtube.com/watch?v=zmiC7X9fUmo\r\n# First sum number tested\r\n# Next sum denominator\r\n#Combine in a completed data set\r\n\r\n#Sum will be applied to numTested and it will (~) be subset by everything after\r\nlead_CHBGrpTested <-  aggregate(numTested~\r\n                                  ageGroup+\r\n                                  CHB+\r\n                                  year+\r\n                                  indicator+\r\n                                  indicator.type+\r\n                                  ebllDescription, lead_CHB, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_CHBGrpTested)[colnames(lead_CHBGrpTested) == \r\n                              'numTested'] <- 'chbNumTested'\r\n\r\nlead_CHBGrpDenominator <-  aggregate(denominator~\r\n                                       ageGroup+\r\n                                       CHB+\r\n                                       year+\r\n                                       indicator+\r\n                                       indicator.type+\r\n                                       ebllDescription, lead_CHB, FUN=sum)\r\n#Rename grouped field\r\ncolnames(lead_CHBGrpDenominator)[colnames(lead_CHBGrpDenominator) == \r\n                                   'denominator'] <- 'chbDenominator'\r\n\r\nlead_CHBWithTestGrp <- merge(x= lead_CHB, \r\n                             y= lead_CHBGrpTested, \r\n                             by= c(\r\n                               \"ageGroup\",\r\n                               \"CHB\",\r\n                               \"year\",\r\n                               \"indicator\",\r\n                               \"indicator.type\",\r\n                               \"ebllDescription\"), \r\n                             all.x = TRUE) #Left join so counties may be displayed moving forward\r\nlead_CHBComplete <- merge(x= lead_CHBWithTestGrp, \r\n                          y= lead_CHBGrpDenominator, \r\n                          by= c(\r\n                            \"ageGroup\",\r\n                            \"CHB\",\r\n                            \"year\",\r\n                            \"indicator\",\r\n                            \"indicator.type\",\r\n                            \"ebllDescription\"), \r\n                          all.x = TRUE) #Left join so counties may be displayed moving forward\r\nlead_CHBComplete$CHBTestPct <- round(lead_CHBComplete$chbNumTested/lead_CHBComplete$chbDenominator*100,2)\r\n# #  \r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  output$region_narrative <- renderUI({\r\n                                      \r\n                                      \r\n                                      # Replace the values that are equal to input county by adding the font tab\r\n                                      schsac_raw$County[schsac_raw$County == input$par_county] <-  paste(\"<font color=red>\", schsac_raw$County[schsac_raw$County == input$par_county], \"<\/font>\")\r\n                                      \r\n                                      # Split the data frame by the group column\r\n                                      schsac_split <- split(schsac_raw , schsac_raw$Region)\r\n                                      \r\n                                      # Apply a function to each subset to create a new column with comma-separated values\r\n                                      schsac_character <- sapply(schsac_split, function(x) paste(x$County, collapse = \", \"))\r\n                                      \r\n                                      # Convert the result to a data frame\r\n                                      schsac_df <- as.data.frame(schsac_character)\r\n                                      \r\n                                      # Create an empty character vector to store the results\r\n                                      schsac_result <- character()\r\n                                      \r\n                                      # Loop through each row of schsac_df\r\n                                      for (i in 1:nrow(schsac_df)) {\r\n                                                                    # Get the row name and schsac_character_placeholder as strings\r\n                                                                    rowname <- as.character(rownames(schsac_df)[i])\r\n                                                                    schsac_character_placeholder <- as.character(schsac_df$schsac_character[i])\r\n                                                                    \r\n                                                                    # Concatenate them with a separator\r\n                                                                    concat <- paste0(rowname, \":: \", schsac_character_placeholder)\r\n                                                                    \r\n                                                                    # Append the result to the vector\r\n                                                                    schsac_result <- c(schsac_result, concat)\r\n                                                                  }\r\n                                      \r\n                                      # Paste the result vector and create a new line after each CHB\r\n                                      HTML(paste(schsac_result, collapse=  \"<br/>\"))\r\n                                      \r\n                                      })\r\n  \r\n  output$chb_narrative_01 <- renderUI({\r\n                                      # Replace the values that are equal to input county by adding the font tab\r\n                                      chb_raw_01$County[chb_raw_01$County == input$par_county] <-  paste(\"<font color=red>\", chb_raw_01$County[chb_raw_01$County == input$par_county], \"<\/font>\")\r\n\r\n                                      # Split the data frame by the chb\r\n                                      chb_split <- split(chb_raw_01 , chb_raw_01$CHB)\r\n\r\n                                      # Apply a function to each subset to create a new column with comma-separated values\r\n                                      chb_character <- sapply(chb_split, function(x) paste(x$County, collapse = \", \"))\r\n\r\n                                      # Convert the result to a data frame\r\n                                      chb_df <- as.data.frame(chb_character)\r\n\r\n                                      # Create an empty character vector to store the results\r\n                                      chb_result <- character()\r\n\r\n                                      # Loop through each row of chb_df\r\n                                      for (i in 1:nrow(chb_df)) {\r\n                                                                # Get the row name and chb_character_placeholder as strings\r\n                                                                rowname <- as.character(rownames(chb_df)[i])\r\n                                                                chb_character_placeholder <- as.character(chb_df$chb_character[i])\r\n                        \r\n                                                                # Concatenate them with a separator\r\n                                                                concat <- paste0(rowname, \":: \", chb_character_placeholder)\r\n                        \r\n                                                                # Append the result to the vector\r\n                                                                chb_result <- c(chb_result, concat)\r\n                                                              }\r\n\r\n                                      # Paste the result vector and create a new line after each CHB\r\n                                      HTML(paste(chb_result, collapse =  \"<br/>\"))\r\n                                    })\r\n  \r\n  output$chb_narrative_02 <- renderUI({\r\n                                        # Replace the values that are equal to input county by adding the font tab\r\n                                        chb_raw_02$County[chb_raw_02$County == input$par_county] <-  paste(\"<font color=red>\", chb_raw_02$County[chb_raw_02$County == input$par_county], \"<\/font>\")\r\n                                        \r\n                                        # Split the data frame by the chb\r\n                                        chb_split <- split(chb_raw_02 , chb_raw_02$CHB)\r\n                                        \r\n                                        # Apply a function to each subset to create a new column with comma-separated values\r\n                                        chb_character <- sapply(chb_split, function(x) paste(x$County, collapse = \", \"))\r\n                                        \r\n                                        # Convert the result to a data frame\r\n                                        chb_df <- as.data.frame(chb_character)\r\n                                        \r\n                                        # Create an empty character vector to store the results\r\n                                        chb_result <- character()\r\n                                        \r\n                                        # Loop through each row of chb_df\r\n                                        for (i in 1:nrow(chb_df)) {\r\n                                                                  # Get the row name and chb_character_placeholder as strings\r\n                                                                  rowname <- as.character(rownames(chb_df)[i])\r\n                                                                  chb_character_placeholder <- as.character(chb_df$chb_character[i])\r\n                                                                  \r\n                                                                  # Concatenate them with a separator\r\n                                                                  concat <- paste0(rowname, \":: \", chb_character_placeholder)\r\n                                                                  \r\n                                                                  # Append the result to the vector\r\n                                                                  chb_result <- c(chb_result, concat)\r\n                                                                }\r\n                                        \r\n                                        # Paste the result vector and create a new line after each CHB\r\n                                        HTML(paste(chb_result, collapse =  \"<br/>\"))\r\n                                      })\r\n  # Update the region input based on the county input\r\n  observeEvent(input$par_county, {\r\n                                # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples. \r\n                                # Currently, the county source is from the region datasource but it if ever changes this will handle it \r\n                                if(input$par_county %in% input_schsac_raw$County) {\r\n                                                                                # Create a vector for all region\r\n                                                                                allRegions <- input_schsac_raw$Region \r\n                                                                                \r\n                                                                                # Create a vector of all counties\r\n                                                                                regionCounties <- input_schsac_raw$County\r\n                                                                                \r\n                                                                                # Reorder the region by the county input\r\n                                                                                orderedRegions <- allRegions[order(regionCounties == input$par_county, decreasing = TRUE)]\r\n                                                                                \r\n                                                                                # Reorder the counties by the county input\r\n                                                                                orderedCounties <- regionCounties[order(regionCounties == input$par_county, decreasing = TRUE)]\r\n                                                                                \r\n                                                                                # The commented line below will produce a list of all regions with counties in parenthesis. Initially, this was a good thought process, it is not user friendly and can cause confusion\r\n                                                                                #labeledRegions <-  paste0(orderedRegions, \" (\", orderedCounties, \")\") # if the following is used, only passes one orderRegions object #setNames(orderedRegions, paste0(orderedRegions, \" (\", orderedCounties, \")\"))\r\n                                                                                # Create a named vector of counties with their region names as labels\r\n                                                                                labeledRegions <-  setNames(orderedRegions, paste0(orderedRegions))\r\n                                                                                \r\n                                                                                # Update the choices and selected values of the country input\r\n                                                                                updateSelectInput(\r\n                                                                                                  session, \"par_region\",\r\n                                                                                                  choices = labeledRegions,\r\n                                                                                                  selected = labeledRegions[1]\r\n                                                                                                  )\r\n                                                                                }\r\n                                  else {\r\n                                        updateSelectInput(\r\n                                                          session, \"par_region\",\r\n                                                          choices = \"\",\r\n                                                          selected = \"\"\r\n                                                        )\r\n                                        }\r\n                                  }\r\n               )\r\n  \r\n  # Update the chb input based on the county input\r\n observeEvent(input$par_county, {\r\n                                # In case data source doesn't have the same number of counties Null, Blank, Minnesota are examples\r\n                                if(input$par_county %in% input_chb_raw$County) {\r\n                                                                              # Create a vector of all CHBS\r\n                                                                              allCHBS <- input_chb_raw$CHB\r\n                                                                              \r\n                                                                              # Create a vector of CHB names for each country\r\n                                                                              chbCounties <- input_chb_raw$County\r\n                                                                              \r\n                                                                              # Reorder the region by the county input\r\n                                                                              orderedChbs <- allCHBS[order(chbCounties == input$par_county, decreasing = TRUE)]\r\n                                                                              \r\n                                                                              # Reorder the continents by the continent input\r\n                                                                              orderedCounties <- chbCounties[order(chbCounties == input$par_county, decreasing = TRUE)]\r\n                                                                              \r\n                                                                              # Create a named vector of countries with their continent names as labels\r\n                                                                              labeledChbs <- setNames(orderedChbs, paste0(orderedChbs)) #see regions above for more explanation about this line \r\n                                                                              \r\n                                                                              # Update the choices and selected values of the country input\r\n                                                                              updateSelectInput(\r\n                                                                                                session, \"par_chb\",\r\n                                                                                                choices = labeledChbs,\r\n                                                                                                selected = labeledChbs[1]\r\n                                                                                                )\r\n                                                                            }\r\n                                else {\r\n                                      updateSelectInput(\r\n                                                        session, \"par_chb\",\r\n                                                        choices = \"\",\r\n                                                        selected = \"\"\r\n                                                        )\r\n                                      }\r\n                                }\r\n            )\r\n \r\n # # Hide Narrative when checkbox is selected\r\n #https://stackoverflow.com/questions/60054418/shiny-tab-hide-show\r\n observeEvent(input$par_hide_narrative, ignoreNULL = FALSE, ignoreInit = TRUE, {\r\n                                                                                if(isTRUE(input$par_hide_narrative)) {\r\n                                                                                                                      hideTab(inputId = \"willThisWork\" , target =\"Region\")\r\n                                                                                                                      } \r\n                                                                               else {\r\n                                                                                    showTab(inputId = \"willThisWork\" , target =\"Region\")\r\n                                                                                    }\r\n                                                                                           \r\n                                                                                }\r\n              )\r\n \r\n # Observe the input value of the checkbox\r\n observe({\r\n   if (isTRUE(input$par_hide_narrative)) {\r\n     # Enable the commented-out portion\r\n     hide(\"par_leadYear\")\r\n     hide(\"par_stateRegionChb\")\r\n     hide(\"lead_narrativeHide\")\r\n   } else {\r\n     # Disable the portion when checkbox is unchecked\r\n     show(\"par_leadYear\")\r\n     show(\"par_stateRegionChb\")\r\n     show(\"lead_narrativeHide\")\r\n   }\r\n })\r\n\r\n\r\n  #Healthy Homes\r\n  \r\n  #Display every other label\r\n  # Get the unique values of x\r\n  xlabels <- unique(lead_raw$year)\r\n  # Remove every other value by subsetting with a logical vector\r\n  xlabels [c (FALSE, TRUE)] <- \"\"\r\n  \r\n  #Lead\r\n  #State\r\n  output$lead_state <-  renderPlot({\r\n                                  lead_raw[lead_raw$location ==\"Minnesota\" & \r\n                                            lead_raw$indicator== \"Blood lead testing\"&\r\n                                            lead_raw$indicator.type == \"Test year (annual method)\"\r\n                                            #Requires a comma to work\r\n                                            ,] |>\r\n                                    ggplot(aes(x= year, y= pctTested, color= ageGroup)) +\r\n                                    geom_line()+\r\n                                    geom_point()+\r\n                                    theme(\r\n                                          legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n                                          text= element_text(size= 21), # increase font size \r\n                                          plot.title= element_text(hjust = 0.5) # Center the title\r\n                                          )+\r\n                                    guides(color = guide_legend(title = \"Age Group\"))+\r\n                                    scale_color_discrete(breaks= c('<3 years', '3-<6 years', '<6 years'))+\r\n                                    scale_x_discrete(limit= lead_raw$year, breaks = seq(min(lead_raw$year), max(lead_raw$year), 2))+ # add breaks argument here CoPilot AI generated\r\n                                   #Sets y axis for the same of all the graphs\r\n                                    scale_y_continuous(limits= c(0, 60)) +\r\n                                    labs(\r\n                                        title = \"Blood Lead Testing (Test Year) for all of \\nMinnesota\", #\\n means a new line \r\n                                        x = NULL,\r\n                                        y = \"Pct Tested\"\r\n                                        #caption = \"Data last updated, 1/15/2024\"\r\n                                        )\r\n                                })\r\n  \r\n  #Region\r\n  # Combine Region\r\n  # A lot of sources online say to use all= TRUE after the by condition for an inner. \r\n  # This does not appear to be correct. It seems like it is executing an outer join not an inner join\r\n   lead_Region <- merge(x= lead_raw, y= input_schsac_raw, by.x= \"location\", by.y= \"County\") #, all = TRUE) Don't include the all = TRUE \r\n  # #https://www.youtube.com/watch?v=zmiC7X9fUmo\r\n  # First sum number tested\r\n   # Next sum denominator\r\n   #Combine in a completed data set\r\n   \r\n   #Sum will be applied to numTested and it will (~) be subsetted by everything after\r\n   lead_RegionGrpTested <-  aggregate(numTested~\r\n                                      ageGroup+\r\n                                      Region+\r\n                                      year+\r\n                                      indicator+\r\n                                      indicator.type+\r\n                                      ebllDescription, lead_Region, FUN=sum)\r\n   #Rename grouped field\r\n   colnames(lead_RegionGrpTested)[colnames(lead_RegionGrpTested) == \r\n                                           'numTested'] <- 'regionNumTested'\r\n   \r\n   lead_RegionGrpDenominator <-  aggregate(denominator~\r\n                                           ageGroup+\r\n                                           Region+\r\n                                           year+\r\n                                           indicator+\r\n                                           indicator.type+\r\n                                           ebllDescription, lead_Region, FUN=sum)\r\n   #Rename grouped field\r\n   colnames(lead_RegionGrpDenominator)[colnames(lead_RegionGrpDenominator) == \r\n                                           'denominator'] <- 'regionDenominator'\r\n   \r\n   lead_RegionWithTestGrp <- merge(x= lead_Region, \r\n                                   y= lead_RegionGrpTested, \r\n                                   by= c(\r\n                                   \"ageGroup\",\r\n                                   \"Region\",\r\n                                   \"year\",\r\n                                   \"indicator\",\r\n                                   \"indicator.type\",\r\n                                   \"ebllDescription\"), \r\n                                   all.x = TRUE) #Left join so counties may be displayed moving forward\r\n   lead_RegionComplete <- merge(x= lead_RegionWithTestGrp, \r\n                                y= lead_RegionGrpDenominator, \r\n                                by= c(\r\n                                      \"ageGroup\",\r\n                                      \"Region\",\r\n                                      \"year\",\r\n                                      \"indicator\",\r\n                                      \"indicator.type\",\r\n                                      \"ebllDescription\"), \r\n                                      all.x = TRUE) #Left join so counties may be displayed moving forward\r\n   lead_RegionComplete$regionTestPct <- round(lead_RegionComplete$regionNumTested/lead_RegionComplete$regionDenominator*100,2)\r\n # #  \r\n   #Reactive Data\r\n  lead_region_sub <- reactive({lead_RegionComplete[input$par_region == lead_RegionComplete$Region & #Changed variable so no longer need to use gsub\r\n                                                   lead_RegionComplete$indicator== \"Blood lead testing\"&\r\n                                                   lead_RegionComplete$indicator.type == \"Test year (annual method)\",] })\r\n\r\n  output$lead_region <-  renderPlot({\r\n    #Open parenthesis since it is dynamic\r\n    lead_region_sub() |>\r\n      ggplot(aes(x= year, y= regionTestPct, color= ageGroup)) +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size \r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n      )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n      scale_x_discrete(limit= lead_raw$year, breaks = seq(min(lead_raw$year), max(lead_raw$year), 2))+ # add breaks argument here AI generated\r\n    #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60)) +\r\n      labs(\r\n          title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$par_region, \"Region\"), #\\n means a new line \r\n          x = NULL,\r\n          y = \"Pct Tested\"\r\n          #caption = \"Data last updated, 1/15/2024\"\r\n          )\r\n  })\r\n\r\n#CHB\r\n    \r\n    #Reactive Data\r\n    validateChb <- reactive({\r\n                validate(\r\n                        need(\r\n                            input$par_chb == lead_CHBComplete$CHB, paste(\"There is no data for \", input$par_chb)\r\n                            )\r\n                        )\r\n    })\r\n    \r\n    #Reactive Data\r\n    lead_CHB_sub <- reactive({\r\n                              \r\n                              lead_CHBComplete[input$par_chb == lead_CHBComplete$CHB  &\r\n                              lead_CHBComplete$indicator== \"Blood lead testing\"&\r\n                              lead_CHBComplete$indicator.type == \"Test year (annual method)\",] \r\n                            })\r\n  \r\n  \r\n    output$lead_chb <-  renderPlot({\r\n      \r\n      validateChb() #Won't return red error meassage. It will display the validateChb error message \r\n      #Open parenthesis since it is dynamic\r\n     lead_CHB_sub() |>\r\n        ggplot(aes(x= year, y= CHBTestPct, color= ageGroup))  +\r\n        geom_line()+\r\n        geom_point()+\r\n        theme(\r\n          legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n          text= element_text(size= 21), # increase font size \r\n          plot.title= element_text(hjust = 0.5) # Center the title\r\n          )+\r\n        guides(color = guide_legend(title = \"Age Group\"))+\r\n        scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n        #Had this\r\n       # scale_x_discrete(limits = lead_raw$year, guide = guide_axis(n.dodge = 2))+\r\n        scale_x_discrete(limit= lead_raw$year, breaks = seq(min(lead_raw$year), max(lead_raw$year), 2))+ # add breaks argument here AI generated\r\n        #Sets y axis for the same of all the graphs\r\n        scale_y_continuous(limits= c(0, 60)) +\r\n        labs(\r\n            title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$par_chb, \"CHB\"), #\\n means a new line\r\n            x = NULL,\r\n            y = \"Pct Tested\",\r\n            caption = \"Data last updated, 1/15/2024\"\r\n           )\r\n    })\r\n    \r\n  \r\n  \r\n  \r\n  # Get county data subset\r\n  lead_county_sub <- reactive({lead_raw[lead_raw$location == input$par_county & \r\n                              lead_raw$indicator== \"Blood lead testing\" &\r\n                              lead_raw$indicator.type == \"Test year (annual method)\",] \r\n                            })\r\n  \r\n  output$lead_county <-  renderPlot({\r\n    #Open parenthesis since it is dynamic\r\n    lead_county_sub() |>\r\n      ggplot(aes(x= year, y= pctTested, color= ageGroup)) +\r\n      geom_line()+\r\n      geom_point()+\r\n      theme(\r\n        legend.position=\"bottom\", # move legend to bottom rather than have it on the right\r\n        text= element_text(size= 21), # increase font size\r\n        plot.title= element_text(hjust = 0.5) # Center the title\r\n          )+\r\n      guides(color = guide_legend(title = \"Age Group\"))+\r\n      scale_color_discrete(breaks=c('<3 years', '3-<6 years', '<6 years'))+\r\n      scale_x_discrete(limit= lead_raw$year, breaks = seq(min(lead_raw$year), max(lead_raw$year), 2))+ # add breaks argument here AI generated\r\n    #Sets y axis for the same of all the graphs\r\n      scale_y_continuous(limits= c(0, 60))+\r\n      labs(\r\n          title = paste(\"Blood Lead Testing (Test Year) for \\n\", input$par_county, \"County\"), #\\n means a new line\r\n          x = NULL,\r\n          y = \"Pct Tested\"\r\n         # caption = \"Data last updated, 1/15/2024\"\r\n         )\r\n  })\r\n  \r\n  # https://stackoverflow.com/questions/23233497/outputting-multiple-lines-of-text-with-rendertext-in-r-shiny\r\n    output$lead_narrative <- renderUI({\r\n      strRegion <- paste(\"You selected\", \"<font color=red>\",input$par_region, \"<\/font>\", \"as the Region\")\r\n      strCHB <- paste(\"Youuuuuu selected\", \"<font color=red>\", input$par_chb, \"<\/font>\", \"as the CHB\")\r\n      strCounty <- paste(\"You selected\", \"<font color=red>\", input$par_county, \"<\/font>\", \"as the County\"\r\n                         )\r\n####################################################################################################################################################################################\r\n## LESS then 3 YEARS OF AGE\r\n      \r\n##### Less than 3 years of age State      \r\n      strAgeLessThanThreeState <- if(\r\n                                      #ifelse is required for the times when a value is not provided\r\n                                      ifelse(\r\n                                            #Any checks if any true values exist. is.na() did not work correctly\r\n                                            any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested),\r\n                                            #If meets criteria and is not null then it will return valid value\r\n                                            lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n                                            0\r\n                                            )\r\n                                          <\r\n                                          #ifelse isn't required for state since state will always return a value\r\n                                          #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n                                          unique(\r\n                                                lead_raw[lead_raw$year == input$par_leadYear &\r\n                                                         lead_raw$ageGroup == \"<3 years\" &\r\n                                                         lead_raw$location == \"Minnesota\" &\r\n                                                         lead_raw$indicator== \"Blood lead testing\" &\r\n                                                         lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                                )\r\n                                      )\r\n                                        {\" <b>less<\/b> than <font color=red>\"}\r\n                                  else  {\" <b>greater<\/b> than <font color=red>\"}\r\n\r\n      strAgeLessThanThreeState <- paste0(\r\n                                          strAgeLessThanThreeState,\r\n                                          \"Minnesota <\/font> \",\r\n                                          unique(\r\n                                                lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                          lead_raw$ageGroup == \"<3 years\" &\r\n                                                          lead_raw$location == \"Minnesota\" &\r\n                                                          lead_raw$indicator== \"Blood lead testing\" &\r\n                                                          lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                                 ),\r\n                                          \"% (\",\r\n                                          unique(\r\n                                                lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                          lead_raw$ageGroup == \"<3 years\" &\r\n                                                          lead_raw$location == \"Minnesota\" &\r\n                                                          lead_raw$indicator== \"Blood lead testing\" &\r\n                                                          lead_raw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n                                                 ),\r\n                                          \"/\",\r\n                                          unique(\r\n                                                lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                          lead_raw$ageGroup == \"<3 years\" &\r\n                                                          lead_raw$location == \"Minnesota\" &\r\n                                                          lead_raw$indicator== \"Blood lead testing\" &\r\n                                                          lead_raw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n                                                 ),\r\n                                          \")\"\r\n                                        )\r\n\r\n##### Less than 3 years of age Region      \r\n      strAgeLessThanThreeRegion <- if(\r\n                                      #ifelse is required for the times when a value is not provided\r\n                                      ifelse(\r\n                                            #Any checks if any true values exist. is.na() did not work correctly\r\n                                            any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n                                            #If meets criteria and is not null then it will return valid value\r\n                                            lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n                                            0\r\n                                            )\r\n                                      <\r\n                                      #ifelse isn't required for regions since regions will always return a value\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionTestPct)\r\n                                      )\r\n                                        {\" <b>less<\/b> than the <font color=red>\"}\r\n                                  else  {\" <b>greater<\/b> than the <font color=red>\"}\r\n      \r\n      strAgeLessThanThreeRegion <- paste0(\r\n                                      strAgeLessThanThreeRegion,\r\n                                      input$par_region, \r\n                                      \"<\/font> region \",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionTestPct),\r\n                                      \"% (\",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionNumTested),\r\n                                      \"/\",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<3 years\", ]$regionDenominator),\r\n                                      \")\"\r\n                                    )\r\n      \r\n##### Less than 3 years of age CHB      \r\n      strAgeLessThanThreeChb <- if(\r\n                                  #ifelse is required for the times when a value is not provided\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n                                        0\r\n                                        )\r\n                                  <\r\n                                  #ifelse is required for the times when a value is not provided\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct)), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct),\r\n                                        0\r\n                                        )\r\n                                  )\r\n                                      {\" <b>less<\/b> than <font color=red>\"}\r\n                                else  { \" <b>greater<\/b> than <font color=red>\"}\r\n\r\n      strAgeLessThanThreeChb <- paste0(\r\n                                      strAgeLessThanThreeChb,\r\n                                      input$par_chb, \r\n                                      \"<\/font> \",\r\n                                      ifelse(\r\n                                            #Any checks if any true values exist. is.na() did not work correctly\r\n                                            any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct)), \r\n                                            #If meets criteria and is not null then it will return valid value\r\n                                            unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$CHBTestPct),\r\n                                            0\r\n                                            ),\r\n                                      \"% (\",\r\n                                      ifelse(\r\n                                            #Any checks if any true values exist. is.na() did not work correctly\r\n                                            any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbNumTested)), \r\n                                            #If meets criteria and is not null then it will return valid value\r\n                                            unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbNumTested),\r\n                                            0\r\n                                            ),\r\n                                      \"/\",\r\n                                      ifelse(\r\n                                            #Any checks if any true values exist. is.na() did not work correctly\r\n                                            any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbDenominator)), \r\n                                            #If meets criteria and is not null then it will return valid value\r\n                                            unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<3 years\", ]$chbDenominator),\r\n                                            0\r\n                                            ),\r\n                                      \")\"\r\n                                      )\r\n\r\n#######################Final Narrative snippet     \r\n      strAgeLessThanThree <- paste0(\r\n                                    \"In <font color=red>\",\r\n                                    input$par_leadYear,\r\n                                    \"<\/font>, \",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$pctTested,\r\n                                          0\r\n                                          ),\r\n                                    \"% (\",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$numTested), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$numTested,\r\n                                          0\r\n                                          ),\r\n                                    \"/\",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$denominator), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<3 years\", ]$denominator,\r\n                                          0\r\n                                          ),\r\n                                    \") of <font color=red>\",\r\n                                    input$par_county, \r\n                                    \"<\/font> residents <b>under the age of 3 <\/b>had their blood lead levels tested which is\",\r\n                                    if(input$par_stateRegionChb %in% c(\"All\",\"CHB\")){strAgeLessThanThreeChb},\r\n                                    if(input$par_stateRegionChb %in% c(\"All\",\"Region\")){strAgeLessThanThreeRegion},\r\n                                    if(input$par_stateRegionChb %in% c(\"All\",\"State\")){strAgeLessThanThreeState}\r\n                                  )\r\n      \r\n####################################################################################################################################################################################\r\n## 3 to 6 YEARS OF AGE\r\n      \r\n##### 3 to 6 years of age State      \r\n      strAgeThreeToSixState <- if(\r\n                                  #ifelse is required for the times when a value is not provided\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested),\r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n                                        0\r\n                                        )\r\n                                  <\r\n                                  #ifelse isn't required for state since state will always return a value\r\n                                  #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n                                  unique(\r\n                                         lead_raw[lead_raw$year == input$par_leadYear &\r\n                                         lead_raw$ageGroup == \"3-<6 years\" &\r\n                                         lead_raw$location == \"Minnesota\" &\r\n                                         lead_raw$indicator== \"Blood lead testing\" &\r\n                                         lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                        )\r\n                                )\r\n                                      {\" <b>less<\/b> than <font color=red>\"}\r\n                                else  {\" <b>greater<\/b> than <font color=red>\"}\r\n\r\n      strAgeThreeToSixState <- paste0(\r\n                                      strAgeThreeToSixState,\r\n                                      \"Minnesota <\/font> \",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"3-<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                            ),\r\n                                      \"% (\",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"3-<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n                                            ),\r\n                                      \"/\",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"3-<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n                                            ),\r\n                                      \")\"\r\n                                    )\r\n      \r\n      \r\n##### 3 to 6 years of age Region      \r\n      strAgeThreeToSixRegion <- if(\r\n                                  #ifelse is required for the times when a value is not provided\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n                                        0\r\n                                        )\r\n                                  <\r\n                                    unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionTestPct)\r\n                                  )\r\n                                        {\" <b>less<\/b> than <font color=red>\"}\r\n                                  else  {\" <b>greater<\/b> than <font color=red>\"}\r\n      \r\n      strAgeThreeToSixRegion <- paste0(\r\n                                      strAgeThreeToSixRegion,\r\n                                      input$par_region, \r\n                                      \"<\/font> \",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionTestPct),\r\n                                      \"% (\",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionNumTested),\r\n                                      \"/\",\r\n                                      unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"3-<6 years\", ]$regionDenominator),\r\n                                      \")\"\r\n                                    )\r\n      \r\n##### 3 to 6 years of age CHB      \r\n      strAgeThreeToSixChb <- if(\r\n                                #ifelse is required for the times when a value is not provided\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na() did not work correctly\r\n                                      any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n                                      0\r\n                                      )\r\n                                  <\r\n                                #ifelse is required for the times when a value is not provided\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na() did not work correctly\r\n                                      any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct)), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct),\r\n                                      0\r\n                                      )\r\n                                )\r\n                                    {\" <b>less<\/b> than <font color=red>\"}\r\n                              else  {\" <b>greater<\/b> than <font color=red>\"}\r\n\r\n      strAgeThreeToSixChb <- paste0(\r\n                                  strAgeThreeToSixChb,\r\n                                  input$par_chb,\r\n                                  \"<\/font> \",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct)), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$CHBTestPct),\r\n                                        0\r\n                                        ),\r\n                                  \"% (\",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbNumTested)), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbNumTested),\r\n                                        0\r\n                                        ),\r\n                                  \"/\",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na() did not work correctly\r\n                                        any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbDenominator)), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"3-<6 years\", ]$chbDenominator),\r\n                                        0\r\n                                        ),\r\n                                  \")\"\r\n                                )\r\n      #######################Final Narrative snippet     \r\n      strAgeThreeToSix <- paste0(\r\n                                \"In <font color=red>\",\r\n                                input$par_leadYear,\r\n                                \"<\/font>, \",\r\n                                ifelse(\r\n                                        #Any checks if any true values exist. is.na did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$pctTested,\r\n                                        0\r\n                                      ),\r\n                                \"% (\",\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na did not work correctly\r\n                                      any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$numTested), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$numTested,\r\n                                      0\r\n                                      ),\r\n                                \"/\",\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na did not work correctly\r\n                                      any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$denominator), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"3-<6 years\", ]$denominator,\r\n                                      0\r\n                                      ),\r\n                                \") of <font color=red>\",\r\n                                input$par_county, \r\n                                \"<\/font> residents ages <b>3 to 6 <\/b>had their blood lead levels tested which is\",\r\n                                if(input$par_stateRegionChb %in% c(\"All\",\"CHB\")){strAgeThreeToSixChb},\r\n                                if(input$par_stateRegionChb %in% c(\"All\",\"Region\")){strAgeThreeToSixRegion},\r\n                                if(input$par_stateRegionChb %in% c(\"All\",\"State\")){strAgeThreeToSixState}\r\n                              )\r\n####################################################################################################################################################################################\r\n## Less Than 6 YEARS OF AGE\r\n      \r\n      ##### < 6 years of age State      \r\n      strAgeLessThanSixState <- if(\r\n                                    #ifelse is required for the times when a value is not provided\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested),\r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n                                          0\r\n                                          )\r\n                                    <\r\n                                    #ifelse isn't required for state since state will always return a value\r\n                                    #Unique is required because there is a duplicate for Minnesota in 2019. This was brought up to MDH and since there tool is changing in 2024 they are not going to fix error.\r\n                                    unique(\r\n                                           lead_raw[lead_raw$year == input$par_leadYear &\r\n                                           lead_raw$ageGroup == \"<6 years\" &\r\n                                           lead_raw$location == \"Minnesota\" &\r\n                                           lead_raw$indicator== \"Blood lead testing\" &\r\n                                           lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                          )\r\n                                  )\r\n                                        {\" <b>less<\/b> than <font color=red>\"}\r\n                                  else  {\" <b>greater<\/b> than <font color=red>\"}\r\n\r\n      strAgeLessThanSixState <- paste0(\r\n                                      strAgeLessThanSixState,\r\n                                      \"Minnesota <\/font> \",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$pctTested\r\n                                             ),\r\n                                      \"% (\",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$numTested\r\n                                            ),\r\n                                      \"/\",\r\n                                      unique(\r\n                                            lead_raw[ lead_raw$year == input$par_leadYear &\r\n                                                      lead_raw$ageGroup == \"<6 years\" &\r\n                                                      lead_raw$location == \"Minnesota\" &\r\n                                                      lead_raw$indicator== \"Blood lead testing\" &\r\n                                                      lead_raw$indicator.type == \"Test year (annual method)\", ]$denominator\r\n                                            ),\r\n                                      \")\"\r\n                                    )\r\n      \r\n      ##### < 6 years of age Region      \r\n      strAgeLessThanSixRegion <- if(\r\n                                  #ifelse is required for the times when a value is not provided\r\n                                  ifelse(\r\n                                    #Any checks if any true values exist. is.na() did not work correctly\r\n                                    any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n                                    #If meets criteria and is not null then it will return valid value\r\n                                    lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n                                    0\r\n                                  )\r\n                                  <\r\n                                  unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionTestPct)\r\n                                )\r\n                                      {\" <b>less<\/b> than <font color=red>\"}\r\n                                else  {\" <b>greater<\/b> than <font color=red>\"}\r\n      \r\n      strAgeLessThanSixRegion <- paste0(\r\n                                        strAgeLessThanSixRegion,\r\n                                        input$par_region, \r\n                                        \"<\/font> \",\r\n                                        unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionTestPct),\r\n                                        \"% (\",\r\n                                        unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionNumTested),\r\n                                        \"/\",\r\n                                        unique(lead_region_sub()[lead_region_sub()$year == input$par_leadYear & lead_region_sub()$ageGroup == \"<6 years\", ]$regionDenominator),\r\n                                        \")\"\r\n                                      )\r\n      \r\n      ##### < 6 years of age CHB      \r\n      strAgeLessThanSixChb <- if(\r\n                                #ifelse is required for the times when a value is not provided\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na() did not work correctly\r\n                                      any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n                                      0\r\n                                      )\r\n                                <\r\n                                #ifelse is required for the times when a value is not provided\r\n                                ifelse(\r\n                                      #Any checks if any true values exist. is.na() did not work correctly\r\n                                      any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct)), \r\n                                      #If meets criteria and is not null then it will return valid value\r\n                                      unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct),\r\n                                      0\r\n                                      )\r\n                                )\r\n                                    {\" <b>less<\/b> than <font color=red>\"}\r\n                              else  {\" <b>greater<\/b> than <font color=red>\"}\r\n      \r\n      strAgeLessThanSixChb <- paste0(\r\n                                    strAgeLessThanSixChb,\r\n                                    input$par_chb,\r\n                                    \"<\/font> \",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct)), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$CHBTestPct),\r\n                                          0\r\n                                          ),\r\n                                    \"% (\",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbNumTested)), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbNumTested),\r\n                                          0\r\n                                          ),\r\n                                    \"/\",\r\n                                    ifelse(\r\n                                          #Any checks if any true values exist. is.na() did not work correctly\r\n                                          any(unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbDenominator)), \r\n                                          #If meets criteria and is not null then it will return valid value\r\n                                          unique(lead_CHB_sub()[lead_CHB_sub()$year == input$par_leadYear & lead_CHB_sub()$ageGroup == \"<6 years\", ]$chbDenominator),\r\n                                          0\r\n                                          ),\r\n                                    \")\"\r\n                                    )\r\n      #######################Final Narrative snippet     \r\n      strAgeLessThanSix <- paste0(\r\n                                  \"In <font color=red>\",\r\n                                  input$par_leadYear,\r\n                                  \"<\/font>, \",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$pctTested,\r\n                                        0\r\n                                        ),\r\n                                  \"% (\",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$numTested), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$numTested,\r\n                                        0\r\n                                        ),\r\n                                  \"/\",\r\n                                  ifelse(\r\n                                        #Any checks if any true values exist. is.na did not work correctly\r\n                                        any(lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$denominator), \r\n                                        #If meets criteria and is not null then it will return valid value\r\n                                        lead_county_sub()[lead_county_sub()$year == input$par_leadYear & lead_county_sub()$ageGroup == \"<6 years\", ]$denominator,\r\n                                        0\r\n                                        ),\r\n                                  \") of <font color=red>\",\r\n                                  input$par_county, \r\n                                  \"<\/font> residents <b>under the age of 6 <\/b> had their blood lead levels tested which is\",\r\n                                  if(input$par_stateRegionChb %in% c(\"All\",\"CHB\")){strAgeLessThanSixChb},\r\n                                  if(input$par_stateRegionChb %in% c(\"All\",\"Region\")){strAgeLessThanSixRegion},\r\n                                  if(input$par_stateRegionChb %in% c(\"All\",\"State\")){strAgeLessThanSixState}\r\n                              )\r\n      HTML(paste\r\n                (\r\n                strAgeLessThanThree,\r\n                strAgeThreeToSix,\r\n                strAgeLessThanSix,\r\n                sep= '<br/><br/>' #I wanted two line breaks between each string\r\n                )\r\n           )\r\n      \r\n    })\r\n}\r\n\r\nshinyApp(ui=ui, server=server)\r\n\r\n","type":"text"}]
